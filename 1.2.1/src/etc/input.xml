<?xml version="1.0" encoding="UTF-8"?>
<commandline xmlns:xi='http://www.w3.org/2001/XInclude'>
   %prog command [subcommand] options
   <command name="*">
      <optgroup name="all commands">
         <option name="verbose" short="v" type="boolean" conflicts="silent">
            Verbose mode, generate a lot of output
         </option>
         <option name="silent" short="s" type="boolean" conflicts="verbose">
            Silent mode, generate little output
         </option>
         <option name="debug" short="d" type="boolean" conflicts="">
            Generate debug statements sent to stderr.
         </option>
         <option name="httpinfo" short="u" type="boolean" conflicts="">
            Show the URL being accessed and the response code.
            Implied by --debug.
         </option>
         <option name="format" short="f" type="string" conflicts="">
            Specify output format as raw (default) or html.
         </option>
         <option name="noauth" type="boolean" conflicts="usesock">
            Connect to port without authentication (without knc).
         </option>
         <option name="noexec" short="n" type="boolean">
            If the server sends back a command to run, echo it and exit.
         </option>
         <option name="usesock" type="string" conflicts="noauth">
            Connect directly (noauth) to the given unix socket.
         </option>
         <option name="aqport" type="string" conflicts="">
            Server port to connect to
         </option>
         <option name="aqhost" type="string" conflicts="">
            Name of the server to connect to
         </option>
      </optgroup>
   </command>

   <command name="status">
      Shows the current server status.
      <transport method="get" path="" />
   </command>

   <command name="flush">
      Force the server to write out all templates that it creates
      automatically, based on the current information in AQDB.
      Requires aqd_admin entitlement.
      <transport method="post" path="flush" />
   </command>

   <command name="ping">
      Simple test that the broker can respond.
      <transport method="get" path="ping" />
   </command>

   <command name="show_host">
      Shows the configuration for a given host, or for all hosts.
      <optgroup name="show_host_Input" mandatory="True" fields="any">
         <option name="hostname" type="string" conflicts="all">Host name</option>
         <option name="all" type="boolean" conflicts="hostname">Select all hosts</option>
      </optgroup>
      <transport trigger="all" method="get" path="host" />
      <transport trigger="hostname" method="get" path="host/%(hostname)s" />
   </command>

   <command name="compile">
    Compile anything that is out-of-date within a specified domain.
    <optgroup name="compile_input" mandatory="True" fields="all">
      <option name="domain" type="string">Domain name</option>
    </optgroup>
    <transport method="post" path="compile"/>
   </command>

   <command name="show_domain">
      Shows the configuration for a given domain, or for all domains
      <optgroup name="show_domain_Input" mandatory="True" fields="any">
         <option name="domain" type="string" conflicts="all">Domain name</option>
         <option name="all" type="boolean" conflicts="hostname">Select all domains</option>
      </optgroup>
      <transport trigger="all" method="get" path="domain" />
      <transport trigger="domain" method="get" path="domain/%(domain)s" />
   </command>
   
   <command name="show_network">
      %prog show network 
      Shows the configuration for a network, or for networks selected by location
      <optgroup name="show_network_Input" mandatory="True" fields="any">
         <option name="network" type="string" conflicts="all">Network name</option>
         <option name="ip" type="string" conflicts="all">IP address</option>
         <option name="type" type="string">Network type</option>
         <optgroup name="show_network_location_opts" fields="any">
	    <option name="company" type="string">Company</option>
	    <option name="hub" type="string">Hub</option>
	    <option name="continent" type="string">Continent</option>
	    <option name="country" type="string">Country</option>
	    <option name="city" type="string">City</option>
	    <option name="building" type="string">Building</option>
	    <option name="rack" type="string">Rack</option>
	    <option name="chassis" type="string">Chassis</option>
	    <option name="desk" type="string">Desk</option>
         </optgroup>
      </optgroup>
      <transport method="get" path="show/network" />
   </command>

   <command name="show_hostiplist">
      Shows a list of all hosts.  Can be narrowed by archetype.
      <optgroup name="show_hostiplist_options">
         <option name="archetype" type="string">Archetype name</option>
      </optgroup>
      <transport trigger="archetype" method="get" path="archetype/%(archetype)s/hostiplist" />
      <transport method="get" path="search/hostiplist" />
   </command>

   <command name="show_hostmachinelist">
      %prog show hostmachinelist
      Shows a list of all hosts and the machine (aka node) they're associated with.
      <optgroup name="show_hostmachinelist_options">
         <option name="archetype" type="string">Archetype name</option>
      </optgroup>
      <transport trigger="archetype" method="get" path="archetype/%(archetype)s/hostmachinelist" />
      <transport method="get" path="search/hostmachinelist" />
   </command>

   <command name="add_cpu">
      Add a new CPU type to the database
      <optgroup name="add_cpu_opts" mandatory="True" fields="all">
         <option name="cpu" type="string">CPU type name</option>
         <option name="vendor" type="string">name of the vendor</option>
         <option name="speed" type="string">CPU speed</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="hardware/cpu/%(vendor)s/%(cpu)s/%(speed)s" />
   </command>

   <command name="show_cpu">
      Show the CPU types in the database
      <optgroup name="show_cpu_opts" mandatory="True" fields="any">
         <option name="all" type="boolean">Show all cpu types</option>
         <option name="cpu" type="string">CPU type name</option>
         <option name="vendor" type="string">name of the vendor</option>
         <option name="speed" type="string">CPU speed</option>
      </optgroup>
      <transport method="get" path="find/hardware/cpu" />
   </command>

   <command name="del_cpu">
      Delete a CPU type from the database
      <optgroup name="del_cpu_opts" mandatory="True" fields="all">
         <option name="cpu" type="string">CPU type name</option>
         <option name="vendor" type="string">name of the vendor</option>
         <option name="speed" type="string">CPU speed</option>
      </optgroup>
      <transport method="delete" path="hardware/cpu/%(vendor)s/%(cpu)s/%(speed)s" />
   </command>

   <command name="add_disk">
      Add a new disk to a machine
      <optgroup name="add_disk_opts" mandatory="True" fields="all">
         <option name="machine" type="string">machine ID</option>
         <option name="disk" type="string">device name of the disk (like sda)</option>
         <option name="type" type="string">type of the disk</option>
         <option name="capacity" type="string">capacity of the disk</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="machine/%(machine)s/disk/%(disk)s" />
   </command>

   <command name="del_disk">
      Delete a disk from a machine.

      If more than one disk matches, they will not be deleted.  Use the
      --all flag to override this and delete all matching disks.
      <optgroup name="del_disk_opts" mandatory="True" fields="all">
         <option name="machine" type="string">machine ID</option>
      </optgroup>
      <optgroup name="del_disk_optional_opts" mandatory="False">
         <option name="disk" type="string">device name of the disk (like sda)</option>
         <option name="type" type="string">type of the disk</option>
         <option name="capacity" type="string">capacity of the disk</option>
         <option name="all" type="boolean">remove any matching disks</option>
      </optgroup>
      <transport trigger="disk" method="delete" path="machine/%(machine)s/disk/%(disk)s" />
      <transport method="post" path="hardware/disk/%(machine)s/command/del" />
   </command>

   <command name="add_host">
      Add a new host to the database.  Requires a machine with a bootable
      interface and a valid IP address.
      <optgroup name="add_host_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Fully qualified Host name</option>
         <option name="machine" type="string">Machine (Node) name</option>
         <option name="archetype" type="string">Archetype name</option>
         <option name="domain" type="string">Aquilon (not DNS) domain</option>
         <option name="status" type="string">Status: production, development, qa, build</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="host/%(hostname)s" />
   </command>

   <command name="add_aquilon_host">
      Add a new host to the database with archetype aquilon.  Requires a
      machine with a bootable interface and a valid IP address.
      <optgroup name="add_aquilon_host_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Fully qualified Host name</option>
         <option name="machine" type="string">Machine (Node) name</option>
         <option name="domain" type="string">Aquilon (not DNS) domain</option>
         <option name="status" type="string">Status: production, development, qa, build</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="aquilon_host/%(hostname)s" />
   </command>

   <command name="add_windows_host">
      Add a new host to the database with archetype windows.  Requires a 
      machine with a bootable interface and a valid IP address.
      <optgroup name="add_windows_host_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Fully qualified Host name</option>
         <option name="machine" type="string">Machine (Node) name</option>
         <option name="status" type="string">Status: production, development, qa, build</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="windows_host/%(hostname)s" />
   </command>

   <command name="add_aurora_host">
      Add a placeholder host to the database to represent an aurora host.
      <optgroup name="add_host_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Fully qualified Host name</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="aurora_host/%(hostname)s" />
   </command>

   <command name="add_model">
      Add a new model
      <optgroup name="add_model_opts" mandatory="True" fields="all">
         <option name="name" type="string">Name of the new model</option>
         <option name="vendor" type="string">Vendor name</option>
         <option name="type" type="string">Machine type name</option>
      </optgroup>
      <optgroup name="default_config_opts" mandatory="False" fields="all">
         <option name="cputype" type="string">CPU type</option>
         <option name="cpunum" type="string">CPU count</option>
         <option name="mem" type="string">amount of installed memory</option>
         <option name="disktype" type="string">installed disk type</option>
         <option name="disksize" type="string">installed disk capacity</option>
         <option name="nics" type="string">number of NIC interfaces</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="hardware/model/%(type)s/%(vendor)s/%(name)s" />
   </command>

   <command name="show_model">
      Show a model
      <optgroup name="show_model_opts" mandatory="True" fields="any">
         <option name="name" type="string">Name of the model</option>
         <option name="vendor" type="string">Vendor name</option>
         <option name="type" type="string">Machine type name</option>
      </optgroup>
      <transport method="get" path="find/hardware/model" />
   </command>

   <command name="del_model">
      Decomission model
      <optgroup name="del_model_opts" mandatory="True" fields="all">
         <option name="name" type="string">Name of the model</option>
         <option name="vendor" type="string">Vendor name</option>
         <option name="type" type="string">Machine type name</option>
      </optgroup>
      <transport method="delete" path="hardware/model/%(type)s/%(vendor)s/%(name)s" />
   </command>

   <command name="add_interface">
      Add a new network interface to the database
      <optgroup name="add_interface_opts" mandatory="True" fields="all">
         <option name="interface" type="string">Interface name</option>
         <option name="machine" type="string">Machine name</option>
         <option name="mac" type="string">MAC address</option>
      </optgroup>
      <optgroup name="add_interface_optional" mandatory="False" fields="none">
         <option name="ip" type="string">IP address</option>
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="machine/%(machine)s/interface/%(interface)s" />
   </command>

   <command name="update_interface">
      Update information about the named interface (IP, MAC, or comments).

      To rename the interface, add the new interface and delete the old.
      If the boot flag is given, the interface will be marked bootable,
      and any other interface attached to the machine will have the bootable
      flag set to false.

      For this change to take affect at the host level, run aq reconfigure.
      <optgroup name="update_interface_opts" mandatory="True" fields="all">
         <option name="interface" type="string">Interface name</option>
         <option name="machine" type="string">Machine name</option>
      </optgroup>
      <optgroup name="update_interface_optional" mandatory="False" fields="none">
         <option name="mac" type="string">MAC address</option>
         <option name="ip" type="string">IP address</option>
         <option name="boot" type="boolean">Mark the interface as bootable</option>
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="post" path="machine/%(machine)s/interface/%(interface)s" />
   </command>

   <command name="del_interface">
      Delete a network interface from the database
      <optgroup name="del_interface_opts" mandatory="True" fields="any">
         <option name="interface" type="string">Interface name</option>
         <option name="machine" type="string">Machine name</option>
         <option name="mac" type="string">MAC address</option>
         <option name="ip" type="string">IP address</option>
      </optgroup>
      <transport method="post" path="interface/command/del" />
   </command>

   <command name="add_service">
      Add new service
      <optgroup name="add_service_opts" mandatory="True" fields="all">
         <option name="service" type="string" mandatory="True">service name</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="comments" type="string">Comments</option>
         <option name="instance" type="string">Instance</option>
      </optgroup>
      <transport method="put" path="service/%(service)s" />
      <transport trigger="instance" method="put" path="service/%(service)s/%(instance)s" />
   </command>

   <command name="show_service">
      Show an existing service
      <optgroup name="show_service_opts" mandatory="True" fields="any">
         <option name="service" type="string">Service name</option>
	 <option name="all" type="boolean" conflicts="service">Select all services</option>
      </optgroup>
      <optgroup name="optional_opts">
	 <option name="instances" type="boolean">Show instances of service</option>
      </optgroup>
      <transport trigger="service" method="get" path="service/%(service)s"/>
      <transport method="get" path="service" />
   </command>

   <command name="del_service">
      Delete a service
      <optgroup name="del_service_opts" mandatory="True" fields="all">
         <option name="service" type="string" mandatory="True">service name</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="instance" type="string">instance name</option>
      </optgroup>
      <transport method="delete" path="service/%(service)s" />
      <transport trigger="instance" method="delete" path="service/%(service)s/%(instance)s" />
   </command>

   <command name="bind_client">
      Bind a service to a client.  If no instance is given and a relevant
      service map has been defined, an instance will be picked automatically.
      If the client already has the service bound, this will fail.
      <optgroup name="bind_client_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name</option>
         <option name="service" type="string">Service name</option>
      </optgroup>
      <optgroup name="bind_client_optional_opts">
         <option name="instance" type="string">Instance name</option>
      </optgroup>
      <transport method="post" path="host/%(hostname)s/client_of_service/%(service)s/bind" />
   </command>

   <command name="rebind_client">
      Bind a service to a client.  If no instance is given and a relevant
      service map has been defined, an instance will be picked automatically.
      If the client already has the service bound, this will override the old.
      <optgroup name="rebind_client_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name</option>
         <option name="service" type="string">Service name</option>
      </optgroup>
      <optgroup name="rebind_client_optional_opts">
         <option name="instance" type="string">Instance name</option>
      </optgroup>
      <transport method="post" path="host/%(hostname)s/client_of_service/%(service)s/rebind" />
   </command>

   <command name="unbind_client">
      Unbind a service from a client.
      <optgroup name="unbind_service_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name</option>
         <option name="service" type="string">Service name</option>
      </optgroup>
      <transport method="delete" path="host/%(hostname)s/client_of_service/%(service)s" />
   </command>

   <command name="bind_server">
      Bind a server as a provider of the service instance.
      If the server is already bound as a provider of the service for a
      different instance, this fails.
      <optgroup name="bind_client_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Server name</option>
         <option name="service" type="string">Service name</option>
         <option name="instance" type="string">Instance name</option>
      </optgroup>
      <transport method="post" path="host/%(hostname)s/server_of_service/%(service)s/bind" />
   </command>

   <command name="rebind_server">
      Bind a server as a provider of the service instance.
      If the server is already bound as a provider of the service for a
      different instance, it will be moved to the given instance.
      <optgroup name="rebind_server_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name</option>
         <option name="service" type="string">Service name</option>
         <option name="instance" type="string">Instance name</option>
      </optgroup>
      <transport method="put" path="host/%(hostname)s/server_of_service/%(service)s/instance/%(instance)s" />
   </command>

   <command name="unbind_server">
      Unbind a server as a provider of the service (instance).
      <optgroup name="unbind_server_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name</option>
         <option name="service" type="string">Service name</option>
      </optgroup>
      <optgroup name="unbind_server_optional_opts">
         <option name="instance" type="string">Instance name</option>
      </optgroup>
      <transport method="delete" path="host/%(hostname)s/server_of_service/%(service)s" />
      <transport trigger="instance" method="delete" path="host/%(hostname)s/server_of_service/%(service)s/instance/%(instance)s" />
   </command>

   <command name="add_required_service">
      Add a required service for an archetype.
      <optgroup name="add_required_service_opts" mandatory="True" fields="all">
         <option name="service" type="string" mandatory="True">service name</option>
         <option name="archetype" type="string" mandatory="True">archetype name</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="archetype/%(archetype)s/service/%(service)s" />
   </command>

   <command name="show_archetype">
      Show information about an archetype, including required services.
      <optgroup name="show_archetype_opts">
         <option name="archetype" type="string">archetype name</option>
      </optgroup>
      <transport trigger="archetype" method="get" path="archetype/%(archetype)s" />
      <transport method="get" path="archetype" />
   </command>

   <command name="del_required_service">
      Delete a service from the list of required services for an archetype.
      <optgroup name="del_required_service_opts" mandatory="True" fields="all">
         <option name="service" type="string" mandatory="True">service name</option>
         <option name="archetype" type="string" mandatory="True">archetype name</option>
      </optgroup>
      <transport method="delete" path="archetype/%(archetype)s/service/%(service)s" />
   </command>

   <command name="map_service">
      Map a service instance to a location.
      <optgroup name="map_service_opts" mandatory="True" fields="all">
         <option name="service" type="string" mandatory="True">service name</option>
         <option name="instance" type="string" mandatory="True">instance name</option>
      </optgroup>
      <optgroup name="map_service_location_opts" mandatory="True" fields="any">
	<option name="company" type="string">Company</option>
	<option name="hub" type="string">Hub</option>
	<option name="continent" type="string">Continent</option>
	<option name="country" type="string">Country</option>
	<option name="city" type="string">City</option>
	<option name="building" type="string">Building</option>
	<option name="rack" type="string">Rack</option>
	<option name="chassis" type="string">Chassis</option>
	<option name="desk" type="string">Desk</option>
      </optgroup>
      <transport method="post" path="service/%(service)s/%(instance)s/command/map" />
   </command>

   <command name="show_map">
      Show any relevant mappings for the given service, instance, or location.
      <optgroup name="show_map_opts" mandatory="True" fields="any">
         <option name="service" type="string">service name</option>
         <option name="instance" type="string">instance name</option>
         <optgroup name="show_map_location_opts" fields="any">
	    <option name="company" type="string">Company</option>
	    <option name="hub" type="string">Hub</option>
	    <option name="continent" type="string">Continent</option>
	    <option name="country" type="string">Country</option>
	    <option name="city" type="string">City</option>
	    <option name="building" type="string">Building</option>
	    <option name="rack" type="string">Rack</option>
	    <option name="chassis" type="string">Chassis</option>
	    <option name="desk" type="string">Desk</option>
         </optgroup>
      </optgroup>
      <transport method="get" path="show/map" />
   </command>

   <command name="unmap_service">
      Remove the map from a service instance to a location.
      <optgroup name="unmap_service_opts" mandatory="True" fields="all">
         <option name="service" type="string" mandatory="True">service name</option>
         <option name="instance" type="string" mandatory="True">instance name</option>
      </optgroup>
      <optgroup name="unmap_service_location_opts" mandatory="True" fields="any">
	<option name="company" type="string">Company</option>
	<option name="hub" type="string">Hub</option>
	<option name="continent" type="string">Continent</option>
	<option name="country" type="string">Country</option>
	<option name="city" type="string">City</option>
	<option name="building" type="string">Building</option>
	<option name="rack" type="string">Rack</option>
	<option name="chassis" type="string">Chassis</option>
	<option name="desk" type="string">Desk</option>
      </optgroup>
      <transport method="post" path="service/%(service)s/%(instance)s/command/unmap" />
   </command>

   <command name="del_host">
      Delete a host.
      <optgroup name="del_host_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name</option>
      </optgroup>
      <transport method="delete" path="host/%(hostname)s" />
   </command>

   <command name="pxeswitch">
      pxe
      <optgroup name="pxeswitch_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name</option>
      </optgroup>
      <optgroup name="bootinstall" mandatory="True" fields="any">
         <option name="install" type="boolean" conflicts="boot">Do an install</option>
         <option name="boot" type="boolean" conflicts="install">Do a reboot</option>
      </optgroup>
      <transport method="post" path="host/%(hostname)s/command/pxeswitch" />
   </command>

   <command name="reconfigure">
      <optgroup name="reconfigure_options" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name</option>
      </optgroup>
      <optgroup name="reconfigure_optional" mandatory="False">
         <option name="os" type="string">OS to assign to host</option>
         <option name="personality" type="string">Personality of the host</option>
      </optgroup>
      <transport method="post" path="host/%(hostname)s/command/reconfigure" />
   </command>

   <command name="add_domain">
      <optgroup name="add domain options" mandatory="True" fields="all">
         <option name="domain" type="string">Name of the new domain</option>
      </optgroup>
      <transport method="put" path="domain/%(domain)s" />
   </command>

   <command name="del_domain">
      <optgroup name="del_domain_options" mandatory="True" fields="all">
         <option name="domain" type="string">Name of the new domain</option>
      </optgroup>
      <transport method="delete" path="domain/%(domain)s" />
   </command>

   <command name="get">
      <optgroup name="get options" mandatory="True" fields="all">
         <option name="domain" type="string">Name of the domain</option>
      </optgroup>
      <transport method="post" path="domain/%(domain)s/command/get" expect="command"/>
   </command>

   <command name="put">
      <optgroup name="put options" mandatory="True" fields="all">
         <option name="domain" type="string">Name of the new domain</option>
      </optgroup>
      <transport method="post" path="domain/%(domain)s/command/bundle" custom="create_bundle"/>
   </command>

   <command name="deploy">
      <optgroup name="deploy options" mandatory="True" fields="all">
         <option name="domain" type="string">Name of the domain</option>
      </optgroup>
      <optgroup name="deploy to" mandatory="False" fields="all">
         <option name="to" type="string">
            Name of the domain to deploy to
         </option>
      </optgroup>
      <transport method="post" path="domain/%(domain)s/command/deploy" />
   </command>

   <command name="manage">
      <optgroup name="manage options" mandatory="True" fields="all">
         <option name="hostname" type="string">Name of the host</option>
         <option name="domain" type="string">Name of the domain</option>
      </optgroup>
      <transport method="post" path="domain/%(domain)s/command/manage" />
   </command>

   <command name="cat">
      <optgroup name="cat options" mandatory="True" fields="any">
         <option name="hostname" type="string" conflicts="template">Name of the host</option>
         <option name="machine" type="string" conflicts="template">Name of the machine</option>
      </optgroup>
      <transport trigger="hostname" method="get" path="host/%(hostname)s/plenary" />
      <transport trigger="machine" method="get" path="machine/%(machine)s/plenary" />
   </command>

   <command name="sync">
      <optgroup name="sync options" mandatory="True" fields="all">
         <option name="domain" type="string">Name of the domain</option>
      </optgroup>
      <transport method="post" path="domain/%(domain)s/command/sync" expect="command"/>
   </command>

   <command name="add_location">
      <optgroup name="add_location_opts" mandatory="True" fields="all">
         <option name="name" type="string">Short name of new location</option>
         <option name="fullname" type="string">Full/descriptive name of new location</option>
         <option name="type" type="string">Location type</option>
         <option name="parentname" type="string">Short name of parent</option>
         <option name="parenttype" type="string">Location type of parent</option>
         <option name="comments" type="string">Comments about the location</option>
      </optgroup>
      <transport method="put" path="location/%(type)s/%(name)s" />
   </command>

   <command name="show_location">
      Shows all locations of a given type
      or information about a specific location type and name.
      <optgroup name="show_location_opts" mandatory="True" fields="all">
         <option name="type" type="string">Location type</option>
      </optgroup>
      <optgroup name="show_location_optional" mandatory="False" fields="all">
         <option name="name" type="string">Host name</option>
      </optgroup>
      <transport trigger="type" method="get" path="location/%(type)s" />
      <transport trigger="name" method="get" path="location/%(type)s/%(name)s" />
   </command>

   <command name="show_location_types">
      Shows all location types.
      <transport method="get" path="location" />
   </command>

   <command name="del_location">
      <optgroup name="del_location_opts" mandatory="True" fields="all">
         <option name="name" type="string">Short name of new location</option>
         <option name="type" type="string">Location type</option>
      </optgroup>
      <transport method="delete" path="location/%(type)s/%(name)s" />
   </command>

   <command name="add_chassis">
      Add a new chassis to the database
      <optgroup name="add_chassis_input" mandatory="True" fields="all">
         <option name="name" type="string">Name of the new chassis</option>
         <option name="rack" type="string">Name of the rack that contains the chassis</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="fullname" type="string">Full, descriptive name</option>
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="location/add_chassis/%(rack)s/%(name)s" />
   </command>

   <command name="show_chassis">
      Show the chassis list, or details about a particular chassis.
      <optgroup name="show_chassis_opts">
         <option name="name" type="string">chassis name</option>
      </optgroup>
      <transport method="get" path="location/chassis" />
      <transport trigger="name" method="get" path="location/chassis/%(name)s" />
   </command>

   <command name="del_chassis">
      Delete a chassis.
      <optgroup name="del_chassis_opts" mandatory="True" fields="all">
         <option name="name" type="string">chassis name</option>
      </optgroup>
      <transport method="delete" path="location/chassis/%(name)s" />
   </command>

   <command name="add_rack">
      Add a new rack to the database.  To add a rack named dd120 on tile H13,
      use --building=dd --rackid=120 --row=H --column=13.  The rackid
      option can also be prefixed by building name, so using
      --building=dd --rackid=dd120 --row=H --column=13 would also work.
      <optgroup name="add_rack_input" mandatory="True" fields="all">
         <option name="rackid" type="string">Name of the new rack, or just the id number</option>
         <option name="building" type="string">Name of the building that houses the rack</option>
         <option name="row" type="string">Row of the tile location (letters only)</option>
         <option name="column" type="string">Column of the tile location (numbers only)</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="fullname" type="string">Full, descriptive name</option>
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="location/add_rack/%(building)s/%(rackid)s" />
   </command>

   <command name="show_rack">
      Show the rack list, or details about a particular rack.
      <optgroup name="show_rack_opts" mandatory="True" fields="any">
         <option name="name" type="string" conflicts="all">rack name</option>
         <option name="all" type="boolean" conflicts="name">all</option>
      </optgroup>
      <transport method="get" path="location/rack" />
      <transport trigger="name" method="get" path="location/rack/%(name)s" />
   </command>

   <command name="del_rack">
      Delete a rack.
      <optgroup name="del_rack_opts" mandatory="True" fields="all">
         <option name="name" type="string">rack name</option>
      </optgroup>
      <transport method="delete" path="location/rack/%(name)s" />
   </command>

   <command name="add_building">
      Add a new building to the database
      <optgroup name="add_building_input" mandatory="True" fields="all">
         <option name="name" type="string">Name of the new building</option>
         <option name="city" type="string">Name of the city that contains the building</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="fullname" type="string">Full, descriptive name</option>
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="location/add_building/%(city)s/%(name)s" />
   </command>

   <command name="show_building">
      Show the building list, or details about a particular building.
      <optgroup name="show_building_opts">
         <option name="name" type="string">building name</option>
      </optgroup>
      <transport method="get" path="location/building" />
      <transport trigger="name" method="get" path="location/building/%(name)s" />
   </command>

   <command name="del_building">
      Delete a building.
      <optgroup name="del_building_opts" mandatory="True" fields="all">
         <option name="name" type="string">building name</option>
      </optgroup>
      <transport method="delete" path="location/building/%(name)s" />
   </command>

   <command name="add_city">
      Add a new city to the database
      <optgroup name="add_city_options" mandatory="True" fields="all">
         <option name="name" type="string">Name of the new city</option>
         <option name="country" type="string">Name of the country that contains the city</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="fullname" type="string">Full, descriptive name</option>
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="location/add_city/%(country)s/%(name)s" />
   </command>

   <command name="show_city">
      Show the list of cities, or details about a particular city.
      <optgroup name="show_city_opts">
         <option name="name" type="string">city name</option>
      </optgroup>
      <transport method="get" path="location/city" />
      <transport trigger="name" method="get" path="location/city/%(name)s" />
   </command>

   <command name="del_city">
      Delete a city.
      <optgroup name="del_city_opts" mandatory="True" fields="all">
         <option name="name" type="string">city name</option>
      </optgroup>
      <transport method="delete" path="location/city/%(name)s" />
   </command>

   <command name="add_country">
      Add a new country to the database
      <optgroup name="add_country_options" mandatory="True" fields="all">
         <option name="name" type="string">Name of the new country</option>
         <option name="continent" type="string">Name of the continent that contains the country</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="fullname" type="string">Full, descriptive name</option>
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="location/add_country/%(continent)s/%(name)s" />
   </command>

   <command name="show_country">
      Show the list of countries, or details about a particular country.
      <optgroup name="show_country_opts">
         <option name="name" type="string">country name</option>
      </optgroup>
      <transport method="get" path="location/country" />
      <transport trigger="name" method="get" path="location/country/%(name)s" />
   </command>

   <command name="del_country">
      Delete a country.
      <optgroup name="del_country_opts" mandatory="True" fields="all">
         <option name="name" type="string">country name</option>
      </optgroup>
      <transport method="delete" path="location/country/%(name)s" />
   </command>

   <command name="add_continent">
      Add a new continent to the database
      <optgroup name="add_continent_options" mandatory="True" fields="all">
         <option name="name" type="string">Name of the new continent</option>
         <option name="hub" type="string">Name of the hub, which the continent belongs to</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="fullname" type="string">Full, descriptive name</option>
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="location/add_continent/%(hub)s/%(name)s" />
   </command>

   <command name="show_continent">
      Show the list of continents, or details about a particular continent.
      <optgroup name="show_continent_opts">
         <option name="name" type="string">continent name</option>
      </optgroup>
      <transport method="get" path="location/continent" />
      <transport trigger="name" method="get" path="location/continent/%(name)s" />
   </command>

   <command name="del_continent">
      Delete a continent.
      <optgroup name="del_continent_opts" mandatory="True" fields="all">
         <option name="name" type="string">continent name</option>
      </optgroup>
      <transport method="delete" path="location/continent/%(name)s" />
   </command>

   <command name="add_hub">
      Add a new hub for MS to the database
      <optgroup name="add_hub_options" mandatory="True" fields="all">
         <option name="name" type="string">Name of the new hub</option>
      </optgroup>
      <optgroup name="optional_opts">
         <option name="fullname" type="string">Full, descriptive (region) name</option>
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="location/add_hub/%(name)s" />
   </command>

   <command name="show_hub">
      Show the list of hubs, or details about a particular hub.
      <optgroup name="show_hub_opts">
         <option name="name" type="string">hub name</option>
      </optgroup>
      <transport method="get" path="location/hub" />
      <transport trigger="name" method="get" path="location/hub/%(name)s" />
   </command>

   <command name="del_hub">
      Delete a hub.
      <optgroup name="del_hub_opts" mandatory="True" fields="all">
         <option name="name" type="string">hub name</option>
      </optgroup>
      <transport method="delete" path="location/hub/%(name)s" />
   </command>

   <command name="make_aquilon">
      Create an aquilon host.
      <optgroup name="mandatory_options" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name to make</option>
         <option name="os" type="string">OS to assign to host</option>
         <option name="personality" type="string">Personality of the host</option>
      </optgroup>
      <transport method="post" path="host/%(hostname)s/command/make_aquilon" />
   </command>

   <command name="add_machine">
      If the model was created with machine specifications (values for
      cpuname, cpuvendor, cpuspeed, cpucount, memory) they do not need
      to be given to this command - the model info will be used as a default.

      However, if the model does not have defaults, they all need to be given.
      <optgroup name="add_machine_opts" mandatory="True" fields="all">
         <option name="machine" type="string">machine name</option>
         <option name="model" type="string">machine model</option>
      </optgroup>
      <optgroup name="add_machine_specs_opts" mandatory="False">
	 <option name="cpuname" type="string">cpu name</option>
	 <option name="cpuvendor" type="string">cpu vendor</option>
	 <option name="cpuspeed" type="string">cpu speed</option>
	 <option name="cpucount" type="string">cpu count</option>
	 <option name="memory" type="string">memory in MB</option>
      </optgroup>
      <optgroup name="add_machine_location_opts" mandatory="True" fields="any">
         <option name="chassis" type="string">Chassis name</option>
         <option name="rack" type="string">Rack name</option>
         <option name="desk" type="string">Desk name</option>
      </optgroup>
      <optgroup name="add_machine_optional">
	 <option name="serial" type="string">serial number</option>
      </optgroup>
      <transport method="put" path="machine/%(machine)s" />
   </command>

   <command name="show_machine">
      <optgroup name="show_machine_opts" mandatory="True" fields="any">
         <option name="machine" type="string">machine name</option>
	 <option name="all" type="boolean" conflicts="machine">all</option>
         <optgroup name="show_machine_location_opts" mandatory="False">
            <option name="chassis" type="string">Chassis name</option>
            <option name="rack" type="string">Rack name</option>
            <option name="desk" type="string">Desk name</option>
         </optgroup>
         <option name="model" type="string">machine model</option>
      </optgroup>
      <transport trigger="all" method="get" path="machine" />
      <transport trigger="machine" method="get" path="machine/%(machine)s" />
      <transport method="get" path="find/machine" />
   </command>

   <command name="del_machine">
      <optgroup name="del_machine_opts" mandatory="True" fields="all">
         <option name="machine" type="string">machine name</option>
      </optgroup>
      <transport method="delete" path="machine/%(machine)s" />
   </command>

   <command name="add_tor_switch">
      If the model was created with machine specifications (values for
      cpuname, cpuvendor, cpuspeed, cpucount, memory) they do not need
      to be given to this command - the model info will be used as a default.

      However, if the model does not have defaults, they all need to be given.

      See the help for add_rack for more information about the rack options.
      The --rack option can only be used with a preexisting rack.  If given
      --building, --rackid, --rackrow, and --rackcolumn, the rack will be
      created if needed.
      <optgroup name="add_tor_switch_opts" mandatory="True" fields="all">
         <option name="tor_switch" type="string">tor_switch name</option>
         <option name="model" type="string">tor_switch model</option>
      </optgroup>
      <optgroup name="add_tor_switch_location" mandatory="True" fields="any">
         <option name="rack" type="string" conflicts="building">Rack name</option>
         <optgroup name="add_tor_switch_new_rack" fields="all">
            <option name="building" type="string" conflicts="rack">Building</option>
            <option name="rackid" type="string" conflicts="rack">Rack id/number</option>
            <option name="rackrow" type="string" conflicts="rack">Rack Row (letters only)</option>
            <option name="rackcolumn" type="string" conflicts="rack">Rack Column (numbers only)</option>
         </optgroup>
      </optgroup>
      <optgroup name="add_tor_switch_primary" mandatory="False" fields="all">
         <option name="interface" type="string">Interface name (like xge49)</option>
         <option name="mac" type="string">MAC address of the interface</option>
         <option name="ip" type="string">IP address of the interface</option>
      </optgroup>
      <optgroup name="add_tor_switch_specs_opts" mandatory="False">
	 <option name="cpuname" type="string">cpu name</option>
	 <option name="cpuvendor" type="string">cpu vendor</option>
	 <option name="cpuspeed" type="string">cpu speed</option>
	 <option name="cpucount" type="string">cpu count</option>
	 <option name="memory" type="string">memory in MB</option>
      </optgroup>
      <optgroup name="add_tor_switch_optional">
	 <option name="serial" type="string">serial number</option>
      </optgroup>
      <transport method="put" path="tor_switch/%(tor_switch)s" />
   </command>

   <command name="show_tor_switch">
      <optgroup name="show_tor_switch_opts" mandatory="True" fields="any">
         <option name="tor_switch" type="string">tor_switch name</option>
         <option name="rack" type="string">Rack name</option>
         <option name="model" type="string">tor_switch model</option>
      </optgroup>
      <transport trigger="tor_switch" method="get" path="tor_switch/%(tor_switch)s" />
      <transport method="get" path="find/tor_switch" />
   </command>

   <command name="del_tor_switch">
      <optgroup name="del_tor_switch_opts" mandatory="True" fields="all">
         <option name="tor_switch" type="string">tor_switch name</option>
      </optgroup>
      <transport method="delete" path="tor_switch/%(tor_switch)s" />
   </command>

   <command name="show_principal">
      <optgroup name="show_role_opts" mandatory="False">
         <option name="principal" type="string">User Principal to check</option>
      </optgroup>
      <transport method="get" path="principal" />
      <transport trigger="principal" method="get" path="principal/%(principal)s" />
   </command>

   <command name="permission">
      <optgroup name="permission_opts" mandatory="True">
         <option name="principal" type="string">User Principal to change</option>
         <option name="role" type="string">Role to use</option>
      </optgroup>
      <optgroup name="permission_optional_opts">
         <option name="createuser" type="boolean">Create an entry for the user if one does not exist</option>
         <option name="createrealm" type="boolean">Create an entry for the realm if one does not exist (implies --createuser)</option>
      </optgroup>
      <transport method="put" path="principal/%(principal)s/role" />
   </command>

   <command name="add_dns_domain">
      <optgroup name="add_dns_domain_options" mandatory="True" fields="all">
         <option name="dns_domain" type="string">Name of the new DNS domain</option>
      </optgroup>
      <optgroup name="add_dns_domain_optional_options" mandatory="False">
         <option name="comments" type="string">Comments</option>
      </optgroup>
      <transport method="put" path="dns_domain/%(dns_domain)s" />
   </command>

   <command name="show_dns_domain">
      <optgroup name="del_dns_domain_options" mandatory="True" fields="any">
         <option name="dns_domain" type="string" conflicts="all">Name of the DNS domain</option>
         <option name="all" type="boolean" conflicts="dns_domain">Show all DNS domains</option>
      </optgroup>
      <transport trigger="dns_domain" method="get" path="dns_domain/%(dns_domain)s" />
      <transport method="get" path="dns_domain" />
   </command>

   <command name="del_dns_domain">
      <optgroup name="del_dns_domain_options" mandatory="True" fields="all">
         <option name="dns_domain" type="string">Name of the DNS domain</option>
      </optgroup>
      <transport method="delete" path="dns_domain/%(dns_domain)s" />
   </command>

</commandline>

