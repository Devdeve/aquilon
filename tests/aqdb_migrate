#!/usr/bin/env python2.6
# -*- cpy-indent-level: 4; indent-tabs-mode: nil -*-
# ex: set expandtab softtabstop=4 shiftwidth=4:
#
# Copyright (C) 2012,2013  Contributor
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Copy AQDB to a different backend.
#
# The source backend is taken from $AQDCONF as usual, the destination backend
# is taken from command line.
#
# Warning: making a copy will cause the sequences in the source database to
# jump - there's no easy way around that.
#
# Examples:
#    ./aqdb_migrate sqlite:////path/aquilon.db
#    ./aqdb_migrate postgresql://<username>@/

import sys
import os

_DIR = os.path.dirname(os.path.realpath(__file__))
_LIBDIR = os.path.join(_DIR, "..", "lib", "python2.6")
if _LIBDIR not in sys.path:
    sys.path.insert(0, _LIBDIR)

from aquilon.aqdb import depends

import ms.version
ms.version.addpkg('psycopg2', '2.5-9.2.4')

import argparse

from sqlalchemy import create_engine, Table
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import text

from aquilon.aqdb.db_factory import DbFactory
from aquilon.aqdb.model import Base


def dummy_mapper(table):
    Base = declarative_base()

    class DummyMapper(Base):
        __table__ = table

    return DummyMapper


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='copy AQDB between backends')
    parser.add_argument('-v', '--verbose',
                        action='store_true',
                        dest='verbose',
                        help='show queries (metadata bind.echo = True)')
    parser.add_argument('dsn', metavar='DSN',
                        help='DSN of the target backend (driver://user[:password]@host[:port]/database)')
    opts = parser.parse_args()

    # Use aquilon.aqdb for connecting to the source backend
    db = DbFactory()
    if opts.verbose:
        db.engine.echo = True
    src_session = sessionmaker(bind=db.engine)()

    if db.engine.dialect.name == 'oracle' or \
       db.engine.dialect.name == 'postgresql':
        src_session.execute(text('SET TRANSACTION ISOLATION LEVEL SERIALIZABLE'))

    dest_engine = create_engine(opts.dsn, convert_unicode=True, echo=opts.verbose)
    dest_session = sessionmaker(bind=dest_engine)()

    if db.engine.dialect.supports_sequences and \
       dest_engine.dialect.supports_sequences:
        # The only operation on sequences that all DBs support is getting the
        # next value. Unfortunately that means we have to alter the state of the
        # source database here.
        for seq in Base.metadata._sequences.values():
            nextid = src_session.execute(seq)
            # Make sure the sequence is re-created with the right start index
            seq.drop(dest_engine, checkfirst=True)
            seq.start = nextid

    Base.metadata.create_all(dest_engine, checkfirst=True)

    if dest_engine.dialect.name == 'postgresql':
        dest_session.execute(text('SET CONSTRAINTS ALL DEFERRED'))
    elif dest_engine.dialect.name == 'oracle':
        dest_session.execute(text('ALTER SESSION SET CONSTRAINTS = DEFERRED'))
    elif dest_engine.dialect.name == 'sqlite':
        # SQLite does not allow changing the deferred state at run-time, but
        # it does allow disabling foreign keys entirely
        dest_session.execute(text('PRAGMA foreign_keys = 0;'))

    for table in Base.metadata.sorted_tables:
        total = src_session.execute(table.count()).scalar()
        print 'Processing %s (%d rows)' % (table, total),
        sys.stdout.flush()
        cnt = 0

        columns = table.columns.keys()

        NewRecord = dummy_mapper(table)
        for record in src_session.execute(table.select()):
            cnt = cnt + 1
            if not cnt % 15000:
                print "... %d" % cnt,
                sys.stdout.flush()

            data = dict(
                [(str(column), getattr(record, column)) for column in columns]
            )

            # insert() is faster, but using .merge() is restartable
            #dest_session.merge(NewRecord(**data))
            dest_session.execute(table.insert().values(**data))

        dest_session.flush()
        print

    dest_session.commit()
