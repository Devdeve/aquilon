#!/usr/bin/env python
# -*- cpy-indent-level: 4; indent-tabs-mode: nil -*-
# ex: set expandtab softtabstop=4 shiftwidth=4:
#
# Copyright (C) 2010,2012,2013,2017  Contributor
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Fake the vlan command"""

from __future__ import print_function

import sys
import os


def determine_output(args, tag):
    """ Figure out which file has the necessary contents for the request."""
    ip = None
    for i in range(len(args)):
        if args[i].startswith("-ip"):
            if i == len(args):
                print("Missing argument for %s" % args[i], file=sys.stderr)
                sys.exit(1)
            ip = args[i+1]
            break
    if not ip:
        print("Missing -ip argument" % args[i], file=sys.stderr)
        sys.exit(1)
    fakedir = os.path.realpath(os.path.join(os.path.dirname(__file__),
                                            "vlan2net.d"))

    if tag:
        return os.path.join(fakedir, "vlan2net_-ip_%s_%s.out" % (ip, tag))
    else:
        return os.path.join(fakedir, "vlan2net_-ip_%s.out" % ip)

def fake_vlan2net(args):
    # To be able to simulate what happens if VLAN tags change, we need a way to
    # return different output for the same switch, as requested by the tests.
    # Since this command is started by the broker and not directly by the tests,
    # a file is used for communication
    tag = None
    scratchdir = os.environ.get("AQTEST_SCRATCHDIR", None)
    if scratchdir:
        tagfile = os.path.join(scratchdir, "vlan2net_tag")
        if os.path.exists(tagfile):
            with open(tagfile, "r") as f:
                tag = f.readlines()[0]

    with open(determine_output(args, tag)) as f:
        for line in f:
            sys.stdout.write(line)

if __name__=='__main__':
    fake_vlan2net(sys.argv)
