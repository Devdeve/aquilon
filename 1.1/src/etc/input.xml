<?xml version="1.0" encoding="UTF-8"?>
<commandline>
   %prog command [subcommand] options
   Commands:
   status
   show host [--hostname NAME | --all]
   add hardware --hostname NAME
   add host --hostname NAME
   add hardware --location NAME
   add template --name NAME --owner WHO
   add model --os OS --model VER --owner WHO
   add service --service NAME [--instance NAME]
   bind service --host NAME --service NAME --instance NAME
   assoc --hostname NAME [--os OS --model VER] [--hardware NAME] [--template NAME]
   pxeswitch --hostname NAME [--boot|--install]
   reconfigure --hostname NAME

   Working with configuration domains:
   add domain --domain NAME
   del domain --domain NAME
   deploy --domain NAME [--to DOMAIN]
   manage --hostname NAME --domain NAME
   cat --domain NAME --template NAME
   get --domain NAME
   put --domain NAME
   <command name="*">
      <optgroup name="all commands">
         <option name="verbose" short="v" type="boolean" conflicts="silent">
            Verbose mode, generate a lot of output
         </option>
         <option name="silent" short="s" type="boolean" conflicts="verbose">
            Silent mode, generate little output
         </option>
         <option name="debug" short="d" type="boolean" conflicts="">
            Generate debug statements sent to stderr.
         </option>
         <option name="noknc" type="boolean" conflicts="usesock">
            Connect to port without using knc.
         </option>
         <option name="usesock" type="string" conflicts="noknc">
            Connect directly (noknc) to the given unix socket.
         </option>
         <option name="aqport" type="string" conflicts="">
            Server port to connect to
         </option>
         <option name="aqhost" type="string" conflicts="">
            Name of the server to connect to
         </option>
      </optgroup>
   </command>

   <command name="status">
      %prog status

      Shows the current server status.
      <transport method="get" path="" />
   </command>

   <command name="show_host">
      %prog show host --name hostname|--all
      Shows the configuration for a given host, or for all hosts.
      <optgroup name="show_host_Input" mandatory="True" fields="any">
         <option name="hostname" type="string" conflicts="all"> Host name </option>
         <option name="all" type="boolean" conflicts="hostname"> Select all hosts </option>
      </optgroup>
      <transport trigger="all" method="get" path="host" />
      <transport trigger="hostname" method="get" path="host/%(hostname)s" />
   </command>

   <command name="add_hardware">
      %prog add hardware --hostname name
      <optgroup name="add_hardware_opts" mandatory="True" fields="any">
         <option name="location" type="string" conflicts="hostname"> Hardware location </option>
      </optgroup>
      <!-- FIXME: Due for overhaul with Scott's work.  Might also
                  be tricky as Nick's implementation has slashes -->
      <transport method="get" path="hardware/%(location)s" />
   </command>

   <command name="add_host">
      <optgroup name="add_host_opts" mandatory="True" fields="all">
         <option name="hostname" type="string"> Host name </option>
      </optgroup>
      <transport method="put" path="host/%(hostname)s" />
   </command>

   <command name="add_template">
      %prog add template --name name --owner owner
      <optgroup name="add_template_opts" mandatory="True" fields="all">
         <option name="name" type="string"> Template name </option>
         <option name="owner" type="string"> Domain name </option>
      </optgroup>
      <transport method="put" path="domain/%(owner)s/template/%(name)s" />
   </command>

   <command name="add_model">
      %prog add model --os=os --model=model --owner=owner
      <optgroup name="add_model_opts" mandatory="True" fields="all">
         <option name="os" type="string"> </option>
         <option name="model" type="string"> </option>
         <option name="owner" type="string"> </option>
      </optgroup>
      <transport method="put" path="domain/%(owner)s/model/%(os)s/%(model)s" />
   </command>

   <command name="add_service">
      %prog add hardware --hostname name
      <optgroup name="add_service_mopts" mandatory="True" fields="all">
         <option name="service" type="string" mandatory="True"> Host name </option>
      </optgroup>
      <optgroup name="add_service_opts" mandatory="False">
         <option name="instance" type="string"> Host name </option>
      </optgroup>
      <transport method="put" path="domain/%(owner)s/service/%(service)s" />
      <transport trigger="instance" method="put" path="domain/%(owner)s/service/%(service)s/%(instance)s" />
   </command>

   <command name="bind_service">
      %prog add hardware --hostname name
      <optgroup name="bind_service_opts" mandatory="True" fields="all">
         <option name="hostname" type="string"> Host name </option>
         <option name="service" type="string"> Service name </option>
         <option name="instance" type="string"> Instance name </option>
      </optgroup>
      <!-- In 1.0, only one service can be bound to a host at once. -->
      <transport method="post" path="host/%(hostname)s/service" />
   </command>

   <command name="del_host">
      <optgroup name="del_host_opts" mandatory="True" fields="all">
         <option name="hostname" type="string"> Host name </option>
      </optgroup>
      <transport method="delete" path="host/%(hostname)s" />
   </command>

   <command name="assoc">
      %prog assoc --hostname NAME [--os OS --model VER] [--hardware NAME] [--template NAME]
      <optgroup name="assoc_opts" mandatory="True" fields="all">
         <option name="hostname" type="string"> Host name </option>
         <optgroup name="additionalopts" mandatory="True" fields="any">
            <optgroup name="os" mandatory="False" fields="all" conflicts="hardware template">
               <option name="os" type="string"> Host name </option>
               <option name="model" type="string"> Host name </option>
            </optgroup>
            <optgroup name="hardware" mandatory="False" fields="all" conflicts="os template">
               <option name="hardware" type="string"> Host name </option>
            </optgroup>
            <optgroup name="template" mandatory="False" fields="all" conflicts="os hardware">
               <option name="template" type="string"> Host name </option>
            </optgroup>
         </optgroup>
      </optgroup>
      <!-- This is a bit of a cop-out, but post seems to be the way to
           go for creating linkages. -->
      <transport method="post" path="host/%(hostname)s/command/assoc" />
   </command>

   <command name="pxeswitch">
      <optgroup name="pxeswitch_opts" mandatory="True" fields="all">
         <option name="hostname" type="string"> Host name </option>
      </optgroup>
      <optgroup name="bootinstall" mandatory="True" fields="any">
         <option name="install" type="boolean" conflicts="boot"> </option>
         <option name="boot" type="boolean" conflicts="install"> </option>
      </optgroup>
      <!-- Not sure if this is purely informational, or if there are side-
           effects -->
      <transport method="put" path="host/%(hostname)s/command/pxeswitch" />
   </command>

   <command name="reconfigure">
      <optgroup name="reconfigure options" mandatory="True" fields="all">
         <option name="hostname" type="string"> Host name </option>
      </optgroup>
      <transport method="post" path="host/%(hostname)s/command/reconfigure" />
   </command>

   <command name="add_domain">
      Usage: %prog add domain --domain domain_name
      <optgroup name="add domain options" mandatory="True" fields="all">
         <option name="domain" type="string"> Name of the new domain </option>
      </optgroup>
      <transport method="put" path="domain/%(domain)s" />
   </command>

   <command name="del_domain">
      Usage: %prog del domain --domain domain_name
      <optgroup name="add domain options" mandatory="True" fields="all">
         <option name="domain" type="string"> Name of the new domain </option>
      </optgroup>
      <transport method="delete" path="domain/%(domain)s" />
   </command>

   <command name="get">
      Usage: %prog get --domain domain_name
      <optgroup name="get options" mandatory="True" fields="all">
         <option name="domain" type="string"> Name of the new domain </option>
      </optgroup>
      <transport method="post" path="domain/%(domain)s/command/get" expect="command"/>
   </command>

   <command name="put">
      Usage: %prog put --domain domain_name
      <optgroup name="put options" mandatory="True" fields="all">
         <option name="domain" type="string"> Name of the new domain </option>
      </optgroup>
      <transport method="post" path="domain/%(domain)s/command/bundle" custom="create_bundle"/>
   </command>
   
   <command name="deploy">
      Usage: %prog deploy --domain domain_name [--to domain_name]
      <optgroup name="deploy options" mandatory="True" fields="all">
         <option name="domain" type="string"> Name of the domain </option>
      </optgroup>
      <optgroup name="deploy to" mandatory="False" fields="all">
         <option name="to" type="string">
            Name of the domain to deploy to
         </option>
      </optgroup>
      <transport method="post" path="domain/%(domain)s/command/deploy" />
   </command>

   <command name="manage">
      Usage: %prog manage --hostname name --domain name
      <optgroup name="manage options" mandatory="True" fields="all">
         <option name="hostname" type="string"> Name of the host </option>
         <option name="domain" type="string"> Name of the domain </option>
      </optgroup>
      <transport method="post" path="domain/%(domain)s/command/manage" />
   </command>

   <command name="cat">
      Usage: %prog cat --hostname name | --domain name --template name
      <optgroup name="cat options" mandatory="True" fields="any">
         <option name="hostname" type="string" conflicts="template"> Name of the host </option>
         <optgroup name="cat template options" fields="all">
            <option name="template" type="string" conflicts="hostname"> Name of the template </option>
            <option name="domain" type="string"> Name of the domain </option>
         </optgroup>
      </optgroup>
      <transport trigger="hostname" method="post" path="host/%(hostname)s/command/cat" />
      <transport trigger="template" method="post" path="template/%(template)s/command/cat" />
   </command>

   <command name="sync">
      Usage: %prog sync --domain domain_name
      <optgroup name="sync options" mandatory="True" fields="all">
         <option name="domain" type="string"> Name of the domain </option>
      </optgroup>
      <transport method="post" path="domain/%(domain)s/command/sync" expect="command"/>
   </command>

   <command name="add_location">
      Usage: %prog add location [options]
         --name [mandatory] Short name of new location
   	     --fullname [optional] Full/descriptive name of new location
	     --type [mandatory] Location type
	     --parentname [mandatory] Short name of parent
	     --parenttype [mandatory] Location type of parent
	     --comments [mandatory] Comments about the location
      <optgroup name="add_location_opts" mandatory="True" fields="all">
         <option name="name" type="string">
            Short name of new location 
         </option>
         <option name="fullname" type="string">
            Full/descriptive name of new location
         </option>
         <option name="type" type="string">
            Location type
         </option>
         <option name="parentname" type="string">
            Short name of parent
         </option>
         <option name="parenttype" type="string">
            Location type of parent
         </option>
         <option name="comments" type="string">
            Comments about the location
         </option>
      </optgroup>
      <transport method="put" path="location/%(type)s/%(name)s" />
   </command>

   <command name="show_location">
      %prog show location [--type type [--name name]]
      Shows all location types, all locations of a given type,
      or information about a specific location type and name.
      <optgroup name="show_location_opts">
         <option name="name" type="string">
            Host name
         </option>
         <option name="type" type="string">
            Location type
         </option>
      </optgroup>
      <transport method="get" path="location" />
      <transport trigger="type" method="get" path="location/%(type)s" />
      <transport trigger="name" method="get" path="location/%(type)s/%(name)s" />
   </command>

   <command name="del_location">
      <optgroup name="del_location_opts" mandatory="all">
         <option name="name" type="string">
            Short name of new location
         </option>
         <option name="type" type="string">
            Location type
         </option>
      </optgroup>
      <transport method="delete" path="location/%(type)s/%(name)s" />
   </command>

   <command name="run_dummy_command">
      Ask the broker for a command to run locally...
      Also using this to test the broker running commands...
      <transport method="get" path="dummy_command" expect="command" />
   </command>


</commandline>

