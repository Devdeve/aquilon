<?xml version="1.0" encoding="UTF-8"?>
<commandline>
   %prog command [subcommand] options
   <command name="*">
      <optgroup name="all commands">
         <option name="verbose" short="v" type="boolean" conflicts="silent">
            Verbose mode, generate a lot of output
         </option>
         <option name="silent" short="s" type="boolean" conflicts="verbose">
            Silent mode, generate little output
         </option>
         <option name="debug" short="d" type="boolean" conflicts="">
            Generate debug statements sent to stderr.
         </option>
         <option name="format" short="f" type="string" conflicts="">
            Specify output format as raw (default) or html.
         </option>
         <option name="noknc" type="boolean" conflicts="usesock">
            Connect to port without using knc.
         </option>
         <option name="noexec" short="n" type="boolean">
            If the server sends back a command to run, echo it and exit.
         </option>
         <option name="usesock" type="string" conflicts="noknc">
            Connect directly (noknc) to the given unix socket.
         </option>
         <option name="aqport" type="string" conflicts="">
            Server port to connect to
         </option>
         <option name="aqhost" type="string" conflicts="">
            Name of the server to connect to
         </option>
      </optgroup>
   </command>

   <command name="status">
      %prog status
      Shows the current server status.
      <transport method="get" path="" />
   </command>

   <command name="show_host">
      %prog show host --name hostname|--all
      Shows the configuration for a given host, or for all hosts.
      <optgroup name="show_host_Input" mandatory="True" fields="any">
         <option name="hostname" type="string" conflicts="all">Host name</option>
         <option name="all" type="boolean" conflicts="hostname">Select all hosts</option>
      </optgroup>
      <transport trigger="all" method="get" path="host" />
      <transport trigger="hostname" method="get" path="host/%(hostname)s" />
   </command>

   <command name="add_hardware">
      %prog add hardware --hostname name
      Add new hardware to the database.
      <optgroup name="add_hardware_opts" mandatory="True" fields="any">
         <option name="location" type="string" conflicts="hostname">Hardware location</option>
      </optgroup>
      <!-- FIXME: Due for overhaul with Scott's work.  Might also
                  be tricky as Nick's implementation has slashes -->
      <transport method="get" path="hardware/%(location)s" />
   </command>

   <command name="add_host">
      %prog add host --name NAME
      Add a new host to the database.
      <optgroup name="add_host_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name</option>
      </optgroup>
      <transport method="put" path="host/%(hostname)s" />
   </command>

   <command name="add_template">
      %prog add template --name NAME --domain DOMAIN
      Add a new template for the specified domain.
      <optgroup name="add_template_opts" mandatory="True" fields="all">
         <option name="name" type="string">Template name</option>
         <option name="domain" type="string">Domain name</option>
      </optgroup>
      <transport method="put" path="domain/%(domain)s/template/%(name)s" />
   </command>

   <command name="add_model">
      %prog add model --name NAME --vendor VENDOR_NAME --hardware HARDWARE_TYPE --machine MACHINE_TYPE
      Add a new model
      <optgroup name="add_model_opts" mandatory="True" fields="all">
         <option name="name" type="string">Name of the new model</option>
         <option name="vendor" type="string">Vendor name</option>
         <option name="hardware" type="string">Hardware type name</option>
         <option name="machine" type="string">Machine type name</option>
      </optgroup>
      <transport method="put" path="hardware/%(hardware)s/%(machine)s/%(vendor)s/%(name)s" />
   </command>

   <command name="add_service">
      %prog add service --service SERVICE_NAME   -instance INSTANCE_NAME]
      Add new service
      <optgroup name="add_service_mopts" mandatory="True" fields="all">
         <option name="service" type="string" mandatory="True">Host name</option>
      </optgroup>
      <optgroup name="add_service_opts" mandatory="False">
         <option name="instance" type="string">Instance name</option>
      </optgroup>
      <transport method="put" path="domain/%(domain)s/service/%(service)s" />
      <transport trigger="instance" method="put" path="domain/%(domain)s/service/%(service)s/%(instance)s" />
   </command>

   <command name="bind_service">
      %prog bind service --host NAME --service SERVICE_NAME 
      --instance INSTANCE_NAME
      Bind a service on a host.
      <optgroup name="bind_service_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name</option>
         <option name="service" type="string">Service name</option>
         <option name="instance" type="string">Instance name</option>
      </optgroup>
      <!-- In 1.0, only one service can be bound to a host at once. -->
      <transport method="post" path="host/%(hostname)s/service" />
   </command>

   <command name="del_host">
      %prog del host --name HOSTNAME
      Delete a host.
      <optgroup name="del_host_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name</option>
      </optgroup>
      <transport method="delete" path="host/%(hostname)s" />
   </command>

   <command name="assoc">
      %prog assoc --hostname NAME 
        -os OS --model VER] [--hardware NAME] [--template NAME]
      Associate a host with an OS, a hardware or a template.
      You have to specify any, but not more than one of the optional argument groups.
      <optgroup name="assoc_opts" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name</option>
         <optgroup name="additionalopts" mandatory="True" fields="any">
            <optgroup name="os" mandatory="False" fields="all" conflicts="hardware template">
               <option name="os" type="string">OS type</option>
               <option name="model" type="string">OS model</option>
            </optgroup>
            <optgroup name="hardware" mandatory="False" fields="all" conflicts="os template">
               <option name="hardware" type="string">Hardware name</option>
            </optgroup>
            <optgroup name="template" mandatory="False" fields="all" conflicts="os hardware">
               <option name="template" type="string">Template name</option>
            </optgroup>
         </optgroup>
      </optgroup>
      <!-- This is a bit of a cop-out, but post seems to be the way to
           go for creating linkages. -->
      <transport method="post" path="host/%(hostname)s/command/assoc" />
   </command>

   <command name="pxeswitch">
      %prog pxeswitch --host HOSTNAME (--install | --boot)
      pxe
      <optgroup name="pxeswitch_opts" mandatory="True" fields="all">
         <option name="host" type="string">Host name</option>
      </optgroup>
      <optgroup name="bootinstall" mandatory="True" fields="any">
         <option name="install" type="boolean" conflicts="boot">Do an install</option>
         <option name="boot" type="boolean" conflicts="install">Do a reboot</option>
      </optgroup>
      <!-- Not sure if this is purely informational, or if there are side-
           effects -->
      <transport method="put" path="host/%(host)s/command/pxeswitch" />
   </command>

   <command name="reconfigure">
      %prog reconfigure --host HOSTNAME
      <optgroup name="reconfigure options" mandatory="True" fields="all">
         <option name="host" type="string">Host name</option>
      </optgroup>
      <transport method="post" path="host/%(hostname)s/command/reconfigure" />
   </command>

   <command name="add_domain">
      %prog add domain --domain NAME
      <optgroup name="add domain options" mandatory="True" fields="all">
         <option name="domain" type="string">Name of the new domain</option>
      </optgroup>
      <transport method="put" path="domain/%(domain)s" />
   </command>

   <command name="del_domain">
      %prog del domain --domain NAME
      <optgroup name="add domain options" mandatory="True" fields="all">
         <option name="domain" type="string">Name of the new domain</option>
      </optgroup>
      <transport method="delete" path="domain/%(domain)s" />
   </command>

   <command name="get">
      %prog get --domain NAME
      <optgroup name="get options" mandatory="False" fields="all">
         <option name="domain" type="string">Name of the new domain</option>
      </optgroup>
      <transport method="post" path="command/get" expect="command"/>
      <transport trigger="domain" method="post" path="domain/%(domain)s/command/get" expect="command"/>
   </command>

   <command name="put">
      %prog put --domain NAME
      <optgroup name="put options" mandatory="True" fields="all">
         <option name="domain" type="string">Name of the new domain</option>
      </optgroup>
      <transport method="post" path="domain/%(domain)s/command/bundle" custom="create_bundle"/>
   </command>

   <command name="deploy">
      %prog deploy --domain DOMAIN_NAME   -to DOMAIN_NAME]
      <optgroup name="deploy options" mandatory="True" fields="all">
         <option name="domain" type="string">Name of the domain</option>
      </optgroup>
      <optgroup name="deploy to" mandatory="False" fields="all">
         <option name="to" type="string">
            Name of the domain to deploy to
         </option>
      </optgroup>
      <transport method="post" path="domain/%(domain)s/command/deploy" />
   </command>

   <command name="manage">
      %prog manage --hostname HOST_NAME --domain DOMAIN_NAME
      <optgroup name="manage options" mandatory="True" fields="all">
         <option name="hostname" type="string">Name of the host</option>
         <option name="domain" type="string">Name of the domain</option>
      </optgroup>
      <transport method="post" path="domain/%(domain)s/command/manage" />
   </command>

   <command name="cat">
      %prog cat ( --hostname HOSTNAME | 
      (--domain DOMAIN_NAME  --template TEMPLATE_NAME ))
      <optgroup name="cat options" mandatory="True" fields="any">
         <option name="hostname" type="string" conflicts="template">Name of the host</option>
         <optgroup name="cat template options" fields="all">
            <option name="template" type="string" conflicts="hostname">Name of the template</option>
            <option name="domain" type="string">Name of the domain</option>
         </optgroup>
      </optgroup>
      <transport trigger="hostname" method="post" path="host/%(hostname)s/command/cat" />
      <transport trigger="template" method="post" path="template/%(template)s/command/cat" />
   </command>

   <command name="sync">
      %prog sync --domain DOMAIN_NAME
      <optgroup name="sync options" mandatory="False" fields="all">
         <option name="domain" type="string">Name of the domain</option>
      </optgroup>
      <transport method="post" path="command/sync" expect="command"/>
      <transport trigger="domain" method="post" path="domain/%(domain)s/command/sync" expect="command"/>
   </command>

   <command name="add_location">
      %prog add location [options]
      <optgroup name="add_location_opts" mandatory="True" fields="all">
         <option name="name" type="string">Short name of new location</option>
         <option name="fullname" type="string">Full/descriptive name of new location</option>
         <option name="type" type="string">Location type</option>
         <option name="parentname" type="string">Short name of parent</option>
         <option name="parenttype" type="string">Location type of parent</option>
         <option name="comments" type="string">Comments about the location</option>
      </optgroup>
      <transport method="put" path="location/%(type)s/%(name)s" />
   </command>

   <command name="show_location">
      %prog show location   -type type [--name name]]
      Shows all locations of a given type
      or information about a specific location type and name.
      <optgroup name="show_location_opts" mandatory="True" fields="any">
         <option name="name" type="string">Host name</option>
         <option name="type" type="string">Location type</option>
      </optgroup>
      <transport trigger="type" method="get" path="location/%(type)s" />
      <transport trigger="name" method="get" path="location/%(type)s/%(name)s" />
   </command>

   <command name="show_location_types">
      %prog show location types
      Shows all location types.
      <transport method="get" path="location" />
   </command>

   <command name="del_location">
      %prog del location --name NAME --type TYPE
      <optgroup name="del_location_opts" mandatory="True" fields="all">
         <option name="name" type="string">Short name of new location</option>
         <option name="type" type="string">Location type</option>
      </optgroup>
      <transport method="delete" path="location/%(type)s/%(name)s" />
   </command>

   <command name="make_aquilon">
      %prog make aquilon
      Create an aquilon host.
      <optgroup name="mandatory_options" mandatory="True" fields="all">
         <option name="hostname" type="string">Host name to make</option>
         <option name="os" type="string">OS to assign to host</option>
         <option name="archetype" type="string">Architecture type of the host</option>
      </optgroup>
      <optgroup name="optional_options">
         <option name="personality" type="string">Personality of the host</option>
      </optgroup>
      <transport method="post" path="host/%(hostname)s/command/make_aquilon" />
   </command>

   <command name="make_aurora">
      %prog make aurora --model MODEL --type TYPE --host HOST1,HOST2... --pod PODNAME --version VERSION
      <optgroup name="mandatory_options" mandatory="True" fields="all">
         Mandatory options:
         <option name="model" type="string">a known model or the full path to a build</option>
         <option name="type" type="string">machine type. Depends upon model</option>
         <option name="host" type="string">list of hosts to make</option>
         <option name="pod" type="string">pod name, required if making aurora</option>
         <option name="version" type="string">aurora-version, required if making non-aurora model</option>
      </optgroup>
      <optgroup name="optional_options">
         Optional options:
         <option name="force" type="boolean">skip check for build other server</option>
         <optgroup name="os_group" fields="all">
            <option name="os" type="string">OS, values are (sunos.sparc|linux|sunos.i386)</option>
            <option name="osrel" type="string">OS release to build</option>
         </optgroup>
         <option name="bootosrel" type="string">OS release of the boottree (deprecated)</option>
         <option name="cellname" type="string">overrides default of /ms/dist/osconf/pod/$pod/root/etc/vice/etc/ThisCell</option>
         <option name="side" type="string">any single character (a-z)</option>
         <option name="podmake" type="boolean">forces call of pod_make</option>
         <option name="nodist" type="boolean">do not perform final dist</option>
         <option name="boothost" type="string">if different from primary hostnames</option>
         <optgroup name="bootserver" fields="all">
            <option name="bootserver" type="string">overrides default for building</option>
            <option name="bootpath" type="string">needs to be set if bootserver is set</option>
         </optgroup>
         <option name="subpod" type="string">A subpod (a different set of config files)</option>
         <option name="mkinterfaces" type="boolean">Create /etc/hostname.* files</option>
         <option name="fca" type="string">Add fibre-disk information into bootparams</option>
         <option name="sysloc" type="string">Specify sysloc by hand</option>
         <option name="pxeswitchfile" type="string">file to point pxe symlink to</option>
         <option name="zebra" type="boolean">create /etc/default/routing and turn on the zebra stuff</option>
         <option name="swapfactor" type="string"></option>
         <option name="thiscell" type="string">override ThisCell of the bunker</option>
         <option name="corepart" type="string">requires case-by-case approval from UnixEng</option>
         <option name="hwclass" type="string">Specify hardware class (default for sunos is sun4u)</option>
         <option name="profile" type="string">Specify an aegisng profile</option>
         <option name="profilever" type="string">Specify and aegisng profilever</option>
         <option name="amd" type="string">Use 'bootserver:bootpath' based on a user specified AMD key</option>
         <option name="remprogs" type="boolean">Use 'bootserver:bootpath' that are defined in remprogs NIS map</option>
         <option name="strategy" type="string">Use alternate net-strategy (i.e. dhcp)</option>
         <option name="vchost" type="string">Specify the Virtual Centre host for ESX servers</option>
         <option name="vcport" type="string">Specify the Virtual Centre port name/number for ESX servers</option>
         <option name="intscheme" type="string">Specify a interface scheme for ESX servers</option>
      </optgroup>
   </command>

   <command name="add_city">
      %prog add city --name CITY --parentname PARENT [--type PARENT-TYPE]
      Add a city.
      <optgroup name="add_city_mandatory_opts" mandatory="True" fields="all">
	 Mandatory options:
         <option name="name" type="string">city name</option>
         <option name="parentname" type="string">parent name</option>
      </optgroup>
      <optgroup name="add_city_optional_opts">
	 Optional options:
         <option name="parenttype" type="string">parent type (default: country)</option>
         <option name="fullname" type="string">Full/descriptive name of new location</option>
         <option name="comments" type="string">Comments about the location</option>
      </optgroup>
      <transport method="put" path="location/city/%(name)s" />
   </command>

   <command name="show_city">
      %prog del city [--name CITY]
      Show the list of cities, or details about a particular city.
      <optgroup name="show_city_opts">
         <option name="name" type="string">city name</option>
      </optgroup>
      <transport method="get" path="location/city" />
      <transport trigger="name" method="get" path="location/city/%(name)s" />
   </command>

   <command name="del_city">
      %prog del city --name CITY
      Delete a city.
      <optgroup name="del_city_opts" mandatory="True" fields="all">
         <option name="name" type="string">city name</option>
      </optgroup>
      <transport method="delete" path="location/city/%(name)s" />
   </command>

   <command name="run_dummy_command">
      Ask the broker for a command to run locally...
      Also using this to test the broker running commands...
      <transport method="get" path="dummy_command" expect="command" />
   </command>
</commandline>

