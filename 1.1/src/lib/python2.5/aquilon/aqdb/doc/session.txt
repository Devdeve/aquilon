""" Some very important things about the selection of attributes in the
    sessionmaker call above:

    *   When using a transactional session, either a rollback() or a close() call
        is *required* when an error is raised by flush() or commit(). The
        flush() error condition will issue a ROLLBACK to the database
        automatically, but the state of the Session itself remains in an
        "undefined" state until the user decides whether to rollback or close.

    *   A commit() call unconditionally issues a flush(). Particularly when
        using transactional=True in conjunction with autoflush=True, explicit
        flush() calls are usually not needed.

    *   Session also supports Python 2.5's with statement so that we can:

        Session = sessionmaker(transactional=False)
        sess = Session()
        with sess.begin():
            item1 = sess.query(Item).get(1)
            item2 = sess.query(Item).get(2)
            item1.foo = 'bar'
            item2.bar = 'foo'

    Methods that can be called against objects pulled from session.query():

    *   expunge() removes an object from the Session, sending persistent
        instances-> detached state, and pending instances-> transient state.

    *   clear() expunges everything from the Session, but doesn't reset any
        transactional state or connection resources. What you usually want
        instead of clear is close()

    *   close() method issues a clear(), and releases any transactional or
        connection resources. When connections are returned to the connection
        pool, whatever transactional state exists is rolled back.

    *   reload()/expire(): to assist with the Session's "sticky" behavior,
        instances which are present, individual objects can have all of their
        attributes immediately reloaded from the database, or marked as
        "expired".
        This will cause a reload to occur upon the next access of any mapped
        attributes. This includes all relationships, so lazy-loaders will be
        re-initialized, eager relationships will be repopulated. Any changes
        marked on the object are discarded.

    Quickie review of Object States in the Session:

    *Transient: an instance that's not in a session, and is not
        saved to the database; i.e. it has no database identity. The only
        relationship such an object has to the ORM is that its class has a
        mapper() associated with it.

    *Pending: when you save() a transient instance, it becomes pending. It still
        wasn't actually flushed to the database yet, but it will be when the
        next flush occurs.

    *Persistent: An instance which is present in the session and has a record
        in the database. You get persistent instances by either flushing so
        that the pending instances become persistent, or by querying the
        database for existing instances (or moving persistent instances from
        other sessions into your local session).

    *Detached: an instance which has a record in the database, but is not in any
        session. Theres nothing wrong with this, and you can use objects
        normally when they're detached, except they will not be able to issue
        any SQL in order to load collections or attributes which are not yet
        loaded, or were marked as "expired".
"""
