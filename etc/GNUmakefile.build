# -*- makefile -*-
#
# set DOMAIN on commandline to build a specific cluster
# default is to build 'ny-prod'
#
# examples:
#
#   make count        -- how many hosts need recompiling
#   make              -- compile all hosts that are out of date
#   make <hostname>   -- force rebuild of single host
#   make only HOST=<hostname>   -- ditto
#   make only HOSTS="h1 h2 h3"  -- efficient way of forcing several hosts
#

# The directory structure under QROOT is modelled after the SCDB implementation
# which expects the build and cfg subdirectories. We've added a "deps"
# directory and a "hosts" directory which track what's going on.
# The only reason for the "hosts" directory is to be able to compile templates
# that depend on other hosts (a fairly rare occurrence) without requiring
# all hosts to be in the same template domain. This is why the "hosts" directory
# is "global" and has no template domain qualifier.

#   build/xml/$domain/* = (pan deps and pan output xml files)
#   cfg/domains/$domain/profiles/*.tpl = input host profiles
#   deps/$domain/*.dep = makefile-style dependencies, constructed by us (mkdep)
#   hosts/*.tpl = working host tpls, copied from cfg/domains/$domain/profiles

DOMAIN   = ny-prod
QROOT    = /var/quattor/
CONFIG   = $(QROOT)/cfg/domains/$(DOMAIN)
PROFILES = $(CONFIG)/profiles
OUTPUT   = $(QROOT)/build/xml/$(DOMAIN)
DEPENDS  = $(QROOT)/deps/$(DOMAIN)
FINAL    = $(QROOT)/web/htdocs/profiles
HOSTDIR  = $(QROOT)/hosts

TOOLDIR   = $(QROOT)/build
PERL5     = /ms/dist/perl5/bin/perl5.8
MKDEP     = $(TOOLDIR)/mkdep

RSYNC = /ms/dist/fsf/PROJ/rsync/2.6.6/bin/rsync

# XXX: TODO: IMPORTANT: ETC
# The include below to include $(QROOT)/templates/$(DOMAIN)/aquilon
# is purely a hack for now, until all domains have switched over to
# the new style of templates (where the plenary host template does
# the include path, instead of relying on the compiler. As soon as all
# domains have converted, this include should be deleted (since we may
# one day try and compile simultaneously two hosts of different
# archetypes.

PANC      = /ms/dev/elfms/panc/8.2.3/src/distro/bin/panc
PANC_OPTS = -I $(CONFIG) \
            -I $(QROOT)/templates/$(DOMAIN) \
            -I $(QROOT)/templates/$(DOMAIN)/aquilon \
            -I $(QROOT)/plenary \
            -I $(QROOT)/swrep \
	    -I $(PROFILES) \
	    -I $(HOSTDIR) \
            -O $(OUTPUT)
# The templates are compiled in batches by way of the xargs -n option.
# Each batch is limited to this value which can be overridden.
PANC_BATCH_SIZE = 1000

XMLS      = $(subst $(PROFILES),$(OUTPUT),\
               $(subst .tpl,.xml,$(wildcard $(PROFILES)/*.tpl)))

XMLDEPS   = $(XMLS:.xml=.xml.dep)

MKDEPS    = $(subst $(OUTPUT),$(DEPENDS),$(XMLDEPS:.xml.dep=.dep))

HOSTNAMES = $(subst $(PROFILES)/,,$(basename $(wildcard $(PROFILES)/*.tpl)))

# for logging - jump through hoops to get something that will be constant!
PIDFILE = $(shell echo .begin.$$$$)
ifeq ($(origin MARKER), undefined)
MARKER := /tmp/$(PIDFILE)
endif
export MARKER

ifdef VQUIET
QUIET ?= $(VQUIET)
endif
ifdef QUIET
DATE  = 
ifdef VQUIET
REDIR = >/dev/null
else
REDIR = 
endif
else
DATE  = `date`
REDIR = 
endif

#
# declare targets
#

.PHONY: begin build build_xmls xmls deps only count end debug dedebug
.SILENT:

#
# targets for specific hosts
#   (this is first so it becomes the default target
#    when HOSTS= is given)
#
ifdef HOST
HOSTS += $(HOST)
endif

ifdef HOSTS
NAMES = $(shell echo $(HOSTS) | tr ',' ' ')
only: $(OUTPUT) $(DEPENDS)
	@$(PANC) $(PANC_OPTS) -y \
		$(addprefix $(PROFILES)/,$(addsuffix .tpl,$(NAMES)))
	@$(MAKE) $(addprefix $(DEPENDS)/,$(addsuffix .dep,$(NAMES)))
	@cp -p --target-directory $(FINAL) $(addprefix $(OUTPUT)/,$(addsuffix .xml,$(NAMES)))
	@cp -p $(addprefix $(PROFILES)/,$(addsuffix .tpl,$(NAMES))) $(HOSTDIR)

endif

#
# usual default target is 'build'
# this is just the sequence of actions to update all of the cluster
#

build: begin build_xmldeps build_deps build_xmls end

count:
	@$(MAKE) DEEP=1 DOMAIN=$(DOMAIN) xmls | grep .tpl | wc -l

#
# these two build_* rules are for efficiency
# panc does parallel builds so we want to give it as much work
# as possible at once. So we use make to build the list of
# profiles to compile, and xargs to stuff the command line
# 
# There are two passes. One to build the xmldeps (which will also
# create new xmls) and then a second build just to build the xmls. If
# there are no internal dependencies, then the second pass will find
# nothing to do (since the first pass will have compiled
# everything). If however one xml depends on another, then the second
# pass might have to recompile.
#
# The quotes around the $todo before sed preserves the newlines.
build_xmls: $(OUTPUT) $(FINAL)
	@echo $(DATE) Updating host XML configs $(REDIR)
	@todo=$$($(MAKE) DEEP=1 DOMAIN=$(DOMAIN) xmls | grep .tpl) ; if [ "$$todo" != "" ]; then (echo $$todo | xargs -n $(PANC_BATCH_SIZE) $(PANC) $(PANC_OPTS) -y ) && ( echo $$todo | xargs cp -p --target-directory $(HOSTDIR); echo "$$todo" |sed -e 's,$(PROFILES)/\(.*\).tpl$$,$(OUTPUT)/\1.xml,' | xargs cp -p --target-directory $(FINAL) ) ; fi
	@echo $(DATE) Updated `find $(OUTPUT) -name '*.xml' -newer $(MARKER) | wc -l` host XML configs $(REDIR)

build_xmldeps: $(OUTPUT)
	@echo $(DATE) Updating XML dependencies $(REDIR)
	@todo=$$($(MAKE) DEEP=1 DOMAIN=$(DOMAIN) xmldeps | grep .tpl) ; if [ "$$todo" != "" ]; then (echo $$todo | xargs -n $(PANC_BATCH_SIZE) $(PANC) $(PANC_OPTS) -y ) && ( echo $$todo | xargs cp -p --target-directory $(HOSTDIR); echo "$$todo" | sed -e 's,$(PROFILES)/\(.*\).tpl$$,$(OUTPUT)/\1.xml,' |  xargs cp -p --target-directory $(FINAL) ) ; fi
	@echo $(DATE) Updated `find $(OUTPUT) -name '*.xml.dep' -newer $(MARKER) | wc -l` XML dependencies $(REDIR)

#
# simple targets for the list generation
#
xmls: $(XMLS)

xmldeps: $(XMLDEPS)

#
# dependencies:
#   this is standard make;
#   we have an extra rule to add messaging before the work
#
build_deps: 
	@echo $(DATE) Updating makefile dependencies $(REDIR)
	@$(MAKE) DOMAIN=$(DOMAIN) deps
	@echo $(DATE) Updated `find $(DEPENDS) -name '*.dep' -newer $(MARKER) | wc -l` makefile dependencies $(REDIR)

deps: $(MKDEPS)

$(DEPENDS) $(OUTPUT) $(FINAL):
	@mkdir -p $@

#
# we "build" the xml config from the profile
# just by printing the profile name ...
#
$(OUTPUT)/%.xml $(OUTPUT)/%.xml.dep: $(PROFILES)/%.tpl
	@echo $<

#
# panc build dependency data, we need to postprocess it
# to make it suitable for makefile include
#
$(DEPENDS)/%.dep: $(OUTPUT)/%.xml.dep
	@$(PERL5) $(MKDEP) $@ < $<


#
# simple target to allow 'make myhost'
#
$(HOSTNAMES):
	@$(MAKE) DOMAIN=$(DOMAIN) only HOST=$@


#
# timestamping
#
begin:
	@touch $(MARKER)
	@echo $(DATE) Cluster $(DOMAIN) has `find $(PROFILES)/. -name '*.tpl' | wc -l` host definitions $(REDIR)

end:
	@rm -f $(MARKER)

#
# we only include the deep dependencies when we have to
# because there are thousands and it takes a long time
# just to process them
#
ifdef DEEP
include $(wildcard $(DEPENDS)/*.dep)
endif

