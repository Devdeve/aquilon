<project name="Template Build" default="compile.domain.profiles" basedir="/var/quattor">
	<description>
		Build quattor templates written in the pan language.
	</description>

	<!--
	Note that ant properties are immutable - the expectation is
	that panc.jar and basedir are set on the command line and then
	these definitions will not change the values being passed in.

	The panc.version line is not used if panc.jar is overridden.
	-->
	<property name="panc.version" value="8.2.8-ms1" />
	<property name="panc.batch.size" value="1000" />
	<property name="panc.jar" location="/ms/dist/elfms/PROJ/panc/${panc.version}/common/lib/panc.jar" />
	<property name="force.build" value="false" />

	<!--
	Be careful of the clean.dep.files property... if it is set at
	all (even to false) the dep files will be cleaned out.
	-->
	<condition property="clean.dep.files">
		<istrue value="${force.build}" />
	</condition>

	<!-- Domain managing hosts to be compiled. -->
	<property name="domain" value="ny-prod" />
	<!-- cfg/domains/$domain/profiles/*.tpl = input host profiles -->
	<property name="source.profiles" location="${basedir}/cfg/domains/${domain}/profiles" />
	<!-- plenary = 'complete' supplemental broker-generated templates -->
	<property name="plenary" location="${basedir}/plenary" />
	<!-- swrep = auto-generated templates for the rpms -->
	<property name="swrep" location="${basedir}/swrep" />
	<!-- templates/${domain} = domain template source repo -->
	<property name="domain.templates" location="${basedir}/templates/${domain}" />

	<!-- hosts/*.tpl = working host tpls, copied from source.profiles -->
	<property name="global.profiles" location="${basedir}/hosts" />
	<!-- build/xml/$domain/* = (pan deps and pan output xml files) -->
	<property name="compiled.profiles" location="${basedir}/build/xml/${domain}" />
	<!-- web/htdocs/profiles = compiled profiles to be served to hosts -->
	<property name="distributed.profiles" location="${basedir}/web/htdocs/profiles" />

	<!-- cfg/domains/$domain/clusters/*.tpl = input cluster profiles -->
	<property name="source.clusters" location="${basedir}/cfg/domains/${domain}/clusters" />
	<!-- clusters/*.tpl = working cluster tpls, copied from source.clusters -->
	<property name="global.clusters" location="${basedir}/clusters" />
	<!-- build/xml/$domain/* = (pan deps and pan output xml files) -->
	<property name="compiled.clusters" location="${basedir}/build/clusters/${domain}" />
	<!-- web/htdocs/profiles = compiled profiles to be served to hosts -->
	<property name="distributed.clusters" location="${basedir}/web/htdocs/clusters" />

	<!--
	Note that the old 'deps' directory was only needed for the
	GNUMakefile.build and is no longer used.
	-->

	<taskdef resource="org/quattor/ant/panc-ant.xml" classpath="${panc.jar}" />

	<path id="pan.hostloadpath">
		<pathelement location="${domain.templates}" />
		<pathelement location="${plenary}" />
		<pathelement location="${swrep}" />
		<pathelement location="${source.profiles}" />
		<pathelement location="${global.profiles}" />
	</path>

	<path id="pan.clusterloadpath">
		<pathelement location="${domain.templates}" />
		<pathelement location="${plenary}" />
		<pathelement location="${source.clusters}" />
		<pathelement location="${global.clusters}" />
	</path>

	<!--
	The delete.* targets will only execute if clean.dep.files has been
	set.  That property will only be set if force.build is set or if
	it is set on the command line.
	-->
	<target name="delete.host.dep" description="remove host dep file" if="clean.dep.files">
		<delete file="${compiled.profiles}/${host.profile}.xml.dep" failonerror="false" />
	</target>

	<!-- See comment above delete.host.dep. -->
	<target name="delete.domain.deps" description="remove domain dep files" if="clean.dep.files">
		<delete failonerror="false">
			<fileset dir="${compiled.profiles}" includes="*.xml.dep" />
		</delete>
	</target>

	<target name="-verify.host.profile">
		<fail message="No host defined via the host.profile property"
			unless="host.profile" />
		<fail message="host.profile should be a hostname, not .tpl">
			<condition>
				<matches pattern=".tpl$$" string="${host.profile}" />
			</condition>
		</fail>
	</target>

	<target name="compile.host.profile" description="optimized for compiling a single profile" depends="-verify.host.profile,delete.host.dep">
		<panc nthread="0" depWriteEnabled="true" outputDirectory="${compiled.profiles}" verbose="true" forceBuild="${force.build}">
			<path refid="pan.hostloadpath" />
			<fileset dir="${source.profiles}" includes="${host.profile}.tpl" />
		</panc>
		<!-- Cache the valid profile in the global pool. -->
		<copy file="${source.profiles}/${host.profile}.tpl" todir="${global.profiles}" preservelastmodified="true" overwrite="${force.build}" />
		<!-- Copy the compiled profile into the web directory.  -->
		<copy file="${compiled.profiles}/${host.profile}.xml" todir="${distributed.profiles}" preservelastmodified="true" overwrite="${force.build}" />
	</target>

	<target name="compile.domain.profiles" description="compile all hosts managed by a domain" depends="delete.domain.deps">
		<fileset id="source.fileset" dir="${source.profiles}" includes="*.tpl" />
		<panc nthread="0" depWriteEnabled="true" outputDirectory="${compiled.profiles}" verbose="true" batchSize="${panc.batch.size}" forceBuild="${force.build}">
			<path refid="pan.hostloadpath" />
			<fileset refid="source.fileset" />
		</panc>
		<!-- Cache all of these valid profiles in the global pool. -->
		<copy todir="${global.profiles}" preservelastmodified="true" overwrite="${force.build}">
			<fileset refid="source.fileset" />
		</copy>
		<!-- Copy any compiled profiles into the web directory.  -->
		<copy todir="${distributed.profiles}" preservelastmodified="true" overwrite="${force.build}">
			<fileset dir="${compiled.profiles}" includes="*.xml" />
		</copy>
	</target>

	<target name="compile.domain.clusters" description="compile all clusters managed by a domain" depends="delete.domain.deps">
		<fileset id="cluster.fileset" dir="${source.clusters}" includes="*.tpl" />
		<panc nthread="0" depWriteEnabled="true" outputDirectory="${compiled.clusters}" verbose="true" batchSize="${panc.batch.size}" forceBuild="${force.build}">
			<path refid="pan.clusterloadpath" />
			<fileset refid="cluster.fileset" />
		</panc>
		<!-- Cache all of these valid profiles in the global pool. -->
		<copy todir="${global.clusters}" preservelastmodified="true" overwrite="${force.build}">
			<fileset refid="cluster.fileset" />
		</copy>
		<!-- Copy any compiled profiles into the web directory.  -->
		<copy todir="${distributed.clusters}" preservelastmodified="true" overwrite="${force.build}">
			<fileset dir="${compiled.clusters}" includes="*.xml" />
		</copy>
	</target>
</project>
